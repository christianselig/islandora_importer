<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

/**
 * Implements hook_menu().
 */
function islandora_importer_menu() {
  return array(
    'islandora/object/%islandora_object/manage/collection/batch_import' => array(
      'title' => 'Batch Import Objects',
      'type' => MENU_LOCAL_ACTION,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_importer_form', 2),
      'access callback' => 'islandora_importer_access_callback',
      'access arguments' => array(2),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function islandora_importer_admin_paths() {
  return array(
    'islandora/object/*/manage/collection/batch_import' => TRUE,
  );
}

/**
 * Wrap a module_invoke_all() call.
 */
function islandora_importer_get_options() {
  return module_invoke_all('islandora_importer');
}

/**
 * Access callback for menu path.
 */
function islandora_importer_access_callback($object) {
  if (!$object) {
    return FALSE;
  }
  $has_import_options = count(islandora_importer_get_options()) > 0;
  // For now only permit batch importing into collections?
  $is_collection = in_array('islandora:collectionCModel', $object->models);
  return user_access(FEDORA_INGEST) && $is_collection && $has_import_options;
}

/**
 * Multi-step form builder.
 *
 * Initially, allows the user to select an importer; when a selection has been
 * made, get the form from the "batch class".
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @param AbstractFedoraObject $object
 *   A string containing the Fedora collection PID into which we will import
 *   citations.
 *
 * @return array
 *   The Drupal form definition.
 */
function islandora_importer_form(array $form, array &$form_state, AbstractFedoraObject $object) {
  if (isset($form_state['storage']['importer'])) {
    // Importers need something like:
    // The first three correspond the the parameters to module_load_include,
    // and the class is one which extends IslandoraBatchImporter
    // (which is defined in islandora_importer.inc)
    extract($form_state['storage']['importer']);
    if (is_subclass_of($class, 'IslandoraBatchImporter')) {
      return $class::getForm($form_state);
    }
    else {
      drupal_set_message(t("The %title importer does not correctly subclass IslandoraBatchImporter. Inform the particular importer module's maintainer!", array('%title' => $title)), 'error');
      unset($form_state['storage']['options'][$form_state['storage']['importer_name']]);
      unset($form_state['storage']['importer']);
    }
  }

  if (!isset($form_state['storage']['importer'])) {
    $options = islandora_importer_get_options();
    if (!isset($form_state['storage']['options'])) {
      $form_state['storage']['options'] = $options;
    }
    if (count($options) > 0) {
      $ops = array();
      foreach (array_keys($options) as $op) {
        $ops[$op] = $options[$op]['title'];
      }

      if (!isset($form_state['storage']['parent_pid'])) {
        $form_state['storage']['parent_pid'] = $object->id;
      }

      $form = array_merge($form, array(
        'importer' => array(
          '#type' => 'select',
          '#title' => t('Importer'),
          '#description' => t('Select which importer to use.'),
          '#options' => $ops,
        ),
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        ),
      ));

      return $form;
    }
    else {
      drupal_set_message(t('There are no valid importer plugins enabled.'), 'error');
      return $form;
    }
  }
}

/**
 * Batch form validation handler.
 */
function islandora_importer_form_validate(array $form, array &$form_state) {
  if (isset($form_state['storage']['importer'])) {
    extract($form_state['storage']['importer']);
    if (is_subclass_of($class, 'IslandoraBatchImporter') && !$class::readyForBatch($form_state)) {
      form_set_error('', t('Not ready to start the batch ingest.  Make sure all necessary information has been entered.'));
    }
  }
}

/**
 * Default batch form submit handler.
 *
 * If we do not have an importer (we're selecting one), save the selection into
 * storage.
 *
 * If we do (and are of course not being overridden by the form from an
 * individual importer plugin), we ask the batch class if we have what they need
 * (providing them with the form state to check) and if so, ask for them to
 * package up what they need into a serializable format to pass along in a
 * batch operation and finally kick off the batch process.
 *
 * @param array $form
 *   An array containing the form structure.
 * @param array $form_state
 *   An array containing the form state.
 */
function islandora_importer_form_submit(array $form, array &$form_state) {
  if (isset($form_state['storage']['importer'])) {
    extract($form_state['storage']['importer']);
    if (is_subclass_of($class, 'IslandoraBatchImporter')) {
      $batch = array(
        'title' => t('Islandora Batch Import'),
        'operations' => array(),
        'finished' => 'islandora_importer_batch_finished',
      );

      $batch['operations'][] = array(
        'islandora_importer_run_batch', array(
          $form_state['storage']['importer'],
          $class::getBatchInfo($form_state),
          $form_state['storage']['parent_pid'],
        ),
      );

      // XXX: Allow modules to alter. Don't know if this is really a good idea
      // or not.
      drupal_alter('islandora_importer_batch', $batch);

      // Set and start the batch.
      batch_set($batch);
      batch_process();
    }
  }
  else {
    $importer_name = $form_state['values']['importer'];
    $form_state['storage']['importer_name'] = $importer_name;
    $form_state['storage']['importer'] = $form_state['storage']['options'][$importer_name];

    if (!isset($form_state['storage']['parent_pid'])) {
      $form_state['storage']['parent_pid'] = $form_state['values']['parent_pid'];
    }
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Callback actually used as the batch operation.
 *
 * XXX:  This function shouldn't really be necessary, but is due to Drupal.
 *   If "is_callable" was used (in _batch_process, I believe?), we could pass
 *   along a (serializable) instantiation of the importer class and the name
 *   of the method to call on it...  Instead, we need to pass the name of
 *   a function due to the use of "function_exists".
 *
 * @param array $class_info
 *   The associative array defining where to find the importer class.
 * @param array $import_info
 *   The data with which to instantiate the importer class.
 * @param string $parent_pid
 *   A string containing a Fedora collection PID, into which objects should
 *   imported.
 * @param array $context
 *   An array containing the Drupal batch context.
 */
function islandora_importer_run_batch(array $class_info, $import_info, $parent_pid, array &$context) {
  extract($class_info);
  // XXX:  Bit of a hack, as batch parameters cannot be references.
  if (!isset($context['results']['islandora_importer']['import_info'])) {
    $context['results']['islandora_importer']['import_info'] = $import_info;
  }
  $import_info = &$context['results']['islandora_importer']['import_info'];

  if (is_subclass_of($class, 'IslandoraBatchImporter')) {
    $instance = new $class($import_info, $parent_pid, $context);
    $instance->runBatch();
  }
}

/**
 * Batch finished callback.
 *
 * Dumps all results on success, informs of failed operations on failure.
 * (via drupal_set_message).
 *
 * @param bool $success
 *   A boolean indicating success
 * @param array $results
 *   An array of results (from the $context['results']
 * @param array $ops
 *   An array of failed operations.
 */
function islandora_importer_batch_finished($success, array $results, array $ops) {
  if ($success) {
    // XXX: Remove some of our "stored" values.
    unset($results['pid_cache']);
    unset($results['islandora_importer']);

    $filename = file_create_filename('batch_import_results.html', 'public://');
    $file = fopen($filename, 'w');
    fwrite($file, '<html><body><ol>');
    $levels = watchdog_severity_levels();
    foreach ($results as $result) {
      $message = $result[0];
      $subs = (array) $result[1];
      $level = (isset($result[2]) && array_key_exists($result[2], $levels)) ?
        $result[2] :
        WATCHDOG_INFO;
      $link = isset($result[3])?
        $result[3] :
        '';

      fwrite($file, '<li>' . $levels[$level] . ': ' . t("@message", array("@message" => $message), $subs) . ((!empty($link)) ?
        ('  ' . t('Link: !link.', array('!link' => $link))) :
        '') . "</li>");

      array_unshift($result, 'islandora_importer');
      call_user_func_array('watchdog', $result);
    }
    fwrite($file, '</ol></body></html>');
    fclose($file);

    if (user_access('access site reports')) {
      drupal_set_message(t('Batch complete!  View/Download @results or see the @watchdog for details.', array(
        '@results' => l(t('simple results'), file_create_url($filename)),
        '@watchdog' => l(t('watchdog log'), 'admin/reports/dblog'),
      )), 'info');
    }
    else {
      drupal_set_message(t('Batch complete!  View/Download @results.', array(
        '@results' => l(t('simple results'), file_create_url($filename)),
      )), 'info');
    }
  }
  else {
    drupal_set_message(t("Failed operations: @operations", array("@operations" => print_r($ops, TRUE))), 'error');
  }
}
